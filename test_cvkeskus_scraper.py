#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã CVKeskus —Å–∫—Ä–∞–ø–µ—Ä–∞
"""

import sys
import os
import json
from datetime import datetime
import logging
import traceback

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('cvkeskus_scraper.log')
    ]
)
logger = logging.getLogger(__name__)

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from apps.scraping.scrapers.cvkeskus_scraper import CVKeskusScraper

def test_cvkeskus_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CVKeskus —Å–∫—Ä–∞–ø–µ—Ä–∞"""
    print("\n" + "="*80)
    print("üîç Testing CVKeskus scraper...")
    print("="*80 + "\n")
    try:
        scraper = CVKeskusScraper()
        jobs = scraper.search_jobs(keywords="", location="", max_pages=1)
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(jobs)}")
        if jobs:
            print("\n–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∞–∫–∞–Ω—Å–∏—è:")
            last_job = jobs[-1]
            print(json.dumps(last_job, ensure_ascii=False, indent=2))
        else:
            print("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(f"cvkeskus_jobs_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", "w", encoding="utf-8") as f:
            json.dump(jobs, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    test_cvkeskus_scraper() 