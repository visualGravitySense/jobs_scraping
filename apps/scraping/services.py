from typing import List, Dict
from .models import Vacancy, JobScore
import re
import logging
import requests
from django.conf import settings
from django.utils import timezone
from .models import Job, UserProfile, Application

logger = logging.getLogger(__name__)

class JobScoringService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    TECH_KEYWORDS = {
        'python': ['python', 'django', 'flask', 'fastapi', 'pandas', 'numpy'],
        'javascript': ['javascript', 'js', 'node.js', 'react', 'vue', 'angular', 'typescript'],
        'java': ['java', 'spring', 'hibernate', 'maven', 'gradle'],
        'php': ['php', 'laravel', 'symfony', 'wordpress', 'drupal'],
        'csharp': ['c#', '.net', 'asp.net', 'entity framework'],
        'devops': ['docker', 'kubernetes', 'aws', 'azure', 'terraform', 'jenkins'],
        'data': ['sql', 'postgresql', 'mysql', 'mongodb', 'redis', 'elasticsearch']
    }
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –æ–ø—ã—Ç–∞
    EXPERIENCE_KEYWORDS = {
        'junior': ['junior', 'trainee', 'intern', 'entry', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π'],
        'middle': ['middle', 'mid', 'intermediate', '—Å—Ä–µ–¥–Ω–∏–π'],
        'senior': ['senior', 'lead', 'principal', 'architect', '—Å—Ç–∞—Ä—à–∏–π']
    }

    def calculate_relevance_score(self, job: Job) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (0-100)"""
        try:
            score = 0
            text = f"{job.title} {job.description}".lower()
            
            # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            tech_score = self._calculate_tech_score(text)
            score += tech_score * 0.4
            
            # –°–∫–æ—Ä –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞
            experience_score = self._calculate_experience_score(text, job.experience_level)
            score += experience_score * 0.2
            
            # –°–∫–æ—Ä –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤)
            freshness_score = self._calculate_freshness_score(job.created_at)
            score += freshness_score * 0.2
            
            # –°–∫–æ—Ä –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            completeness_score = self._calculate_completeness_score(job)
            score += completeness_score * 0.2
            
            return min(100, max(0, int(score)))
            
        except Exception as e:
            logger.error(f"Error calculating relevance score for job {job.id}: {str(e)}")
            return 50  # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def calculate_skill_match_score(self, job: Job) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–≤—ã–∫–æ–≤ (0-100)"""
        try:
            text = f"{job.title} {job.description} {job.requirements}".lower()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
            found_techs = 0
            total_weight = 0
            
            for tech_category, keywords in self.TECH_KEYWORDS.items():
                category_weight = len(keywords)
                found_in_category = sum(1 for keyword in keywords if keyword in text)
                
                if found_in_category > 0:
                    found_techs += found_in_category
                    total_weight += category_weight
            
            if total_weight == 0:
                return 30  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∫–æ—Ä
            score = (found_techs / total_weight) * 100
            return min(100, max(0, int(score)))
            
        except Exception as e:
            logger.error(f"Error calculating skill match score for job {job.id}: {str(e)}")
            return 30

    def calculate_salary_score(self, job: Job) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (0-100)"""
        try:
            if not job.salary_min:
                return 50  # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –µ—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è IT –≤ –≠—Å—Ç–æ–Ω–∏–∏ (EUR/–º–µ—Å—è—Ü)
            salary_ranges = {
                'junior': (1500, 3000),
                'middle': (3000, 5000),
                'senior': (5000, 8000)
            }
            
            min_expected, max_expected = salary_ranges.get(job.experience_level, (2000, 4000))
            
            if job.salary_min >= max_expected:
                return 100
            elif job.salary_min >= min_expected:
                # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É min –∏ max
                ratio = (job.salary_min - min_expected) / (max_expected - min_expected)
                return int(50 + ratio * 50)
            else:
                # –ù–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
                ratio = job.salary_min / min_expected
                return int(ratio * 50)
                
        except Exception as e:
            logger.error(f"Error calculating salary score for job {job.id}: {str(e)}")
            return 50

    def calculate_location_score(self, job: Job) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ (0-100)"""
        try:
            location = job.location.lower()
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞—Ü–∏–π –¥–ª—è IT
            location_scores = {
                'tallinn': 100,
                'tartu': 90,
                'estonia': 85,
                'remote': 95,
                'hybrid': 90
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
            if job.is_remote:
                return 95
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏
            for loc, score in location_scores.items():
                if loc in location:
                    return score
            
            # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä
            return 60
            
        except Exception as e:
            logger.error(f"Error calculating location score for job {job.id}: {str(e)}")
            return 60

    def _calculate_tech_score(self, text: str) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"""
        found_keywords = 0
        total_keywords = sum(len(keywords) for keywords in self.TECH_KEYWORDS.values())
        
        for keywords in self.TECH_KEYWORDS.values():
            found_keywords += sum(1 for keyword in keywords if keyword in text)
        
        return min(100, (found_keywords / total_keywords) * 100)

    def _calculate_experience_score(self, text: str, job_level: str) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞"""
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if job_level in self.EXPERIENCE_KEYWORDS:
            keywords = self.EXPERIENCE_KEYWORDS[job_level]
            if any(keyword in text for keyword in keywords):
                return 100
        
        return 70  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ç–∫–æ

    def _calculate_freshness_score(self, created_at) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        if not created_at:
            return 50
        
        days_old = (timezone.now() - created_at).days
        
        if days_old <= 1:
            return 100
        elif days_old <= 7:
            return 90
        elif days_old <= 14:
            return 70
        elif days_old <= 30:
            return 50
        else:
            return 30

    def _calculate_completeness_score(self, job: Job) -> int:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ –ø–æ–ª–Ω–æ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
        if job.title and len(job.title) > 10:
            score += 20
        if job.description and len(job.description) > 100:
            score += 30
        if job.requirements and len(job.requirements) > 50:
            score += 20
        if job.salary_min:
            score += 15
        if job.company_name:
            score += 15
        
        return min(100, score) 

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.telegram_bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        self.telegram_api_url = f"https://api.telegram.org/bot{self.telegram_bot_token}"

    def send_telegram_notification(self, chat_id: str, jobs: List[Job]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –≤ Telegram"""
        try:
            if not self.telegram_bot_token:
                logger.warning("Telegram bot token not configured")
                return False
            
            if not jobs:
                return True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üî• *–ù–æ–≤—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
            
            for job in jobs[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π
                score = getattr(job, 'jobscore', None)
                score_text = f" ({score.relevance_score}%)" if score else ""
                
                salary_text = ""
                if job.salary_min:
                    salary_text = f"\nüí∞ {job.salary_min}"
                    if job.salary_max:
                        salary_text += f"-{job.salary_max}"
                    salary_text += f" {job.salary_currency}"
                
                remote_text = " üè† Remote" if job.is_remote else ""
                
                message += f"*{job.title}*{score_text}\n"
                message += f"üè¢ {job.company_name}\n"
                message += f"üìç {job.location}{remote_text}{salary_text}\n"
                message += f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({job.source_url})\n\n"
            
            if len(jobs) > 5:
                message += f"–ò –µ—â–µ {len(jobs) - 5} –≤–∞–∫–∞–Ω—Å–∏–π...\n"
            
            message += "\nüí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = requests.post(
                f"{self.telegram_api_url}/sendMessage",
                json={
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'Markdown',
                    'disable_web_page_preview': True
                },
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info(f"Telegram notification sent to {chat_id}")
                return True
            else:
                logger.error(f"Failed to send Telegram notification: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending Telegram notification: {str(e)}")
            return False

    def send_application_reminder(self, chat_id: str, application: Application) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
        try:
            if not self.telegram_bot_token:
                return False
            
            message = f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ*\n\n"
            message += f"*{application.job.title}*\n"
            message += f"üè¢ {application.job.company_name}\n"
            message += f"üìÖ –°—Ç–∞—Ç—É—Å: {application.get_status_display()}\n"
            
            if application.notes:
                message += f"üìù –ó–∞–º–µ—Ç–∫–∏: {application.notes[:100]}...\n"
            
            message += f"\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é]({application.job.source_url})"
            
            response = requests.post(
                f"{self.telegram_api_url}/sendMessage",
                json={
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'Markdown',
                    'disable_web_page_preview': True
                },
                timeout=10
            )
            
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"Error sending application reminder: {str(e)}")
            return False

    def filter_jobs_for_user(self, jobs: List[Job], user_profile: UserProfile) -> List[Job]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            filtered_jobs = []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_skills = [skill.strip().lower() for skill in user_profile.skills.split(',') if skill.strip()]
            
            for job in jobs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
                if user_profile.min_salary and job.salary_min:
                    if job.salary_min < user_profile.min_salary:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                if user_profile.location_preference:
                    if (user_profile.location_preference.lower() not in job.location.lower() 
                        and not job.is_remote):
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤
                if user_skills:
                    job_text = f"{job.title} {job.description} {job.requirements}".lower()
                    skill_match = any(skill in job_text for skill in user_skills)
                    if not skill_match:
                        continue
                
                filtered_jobs.append(job)
            
            return filtered_jobs
            
        except Exception as e:
            logger.error(f"Error filtering jobs for user {user_profile.user.username}: {str(e)}")
            return jobs  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

class JobAnalyticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    
    def get_market_trends(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞"""
        try:
            from .models import Job, Company
            from django.db.models import Count, Avg, Q
            from datetime import timedelta
            
            # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            last_month = timezone.now() - timedelta(days=30)
            last_week = timezone.now() - timedelta(days=7)
            
            # –†–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            total_jobs = Job.objects.filter(is_active=True).count()
            jobs_last_month = Job.objects.filter(
                is_active=True, 
                created_at__gte=last_month
            ).count()
            jobs_last_week = Job.objects.filter(
                is_active=True, 
                created_at__gte=last_week
            ).count()
            
            # –¢–æ–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
            tech_keywords = ['python', 'javascript', 'java', 'react', 'node.js', 'django']
            tech_stats = {}
            
            for tech in tech_keywords:
                count = Job.objects.filter(
                    is_active=True,
                    description__icontains=tech
                ).count()
                tech_stats[tech] = count
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
            salary_by_level = {}
            for level in ['junior', 'middle', 'senior']:
                avg_salary = Job.objects.filter(
                    is_active=True,
                    experience_level=level,
                    salary_min__isnull=False
                ).aggregate(avg=Avg('salary_min'))['avg']
                
                salary_by_level[level] = round(avg_salary) if avg_salary else None
            
            return {
                'total_jobs': total_jobs,
                'jobs_growth': {
                    'last_month': jobs_last_month,
                    'last_week': jobs_last_week
                },
                'top_technologies': dict(sorted(tech_stats.items(), key=lambda x: x[1], reverse=True)),
                'average_salaries': salary_by_level,
                'remote_percentage': self._calculate_remote_percentage()
            }
            
        except Exception as e:
            logger.error(f"Error getting market trends: {str(e)}")
            return {}

    def _calculate_remote_percentage(self) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            from .models import Job
            
            total = Job.objects.filter(is_active=True).count()
            remote = Job.objects.filter(is_active=True, is_remote=True).count()
            
            return round((remote / total * 100) if total > 0 else 0, 2)
            
        except Exception as e:
            logger.error(f"Error calculating remote percentage: {str(e)}")
            return 0.0 